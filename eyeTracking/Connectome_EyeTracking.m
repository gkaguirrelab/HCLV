function Connectome_EyeTracking
% Main driver for eyetracking during connectome sessions.

% aug, 4 2016 - GF : written and commented
% nov, 29 2016 - GF : edit to get only report and RAW video for every run.
%% Set defaults
% Get user name
[~, tmpName] = system('whoami');
userName = strtrim(tmpName);
% get date
formatOut = 'mmddyy';
datestamp = datestr((datetime('now')),formatOut);
% Set Dropbox directory
dbDir = ['/Users/' userName '/Dropbox-Aguirre-Brainard-Lab/'];
disp(['Dropbox directory = ' dbDir]);
sessNames = {...
    'session1_restAndStructure' ...
    'session2_spatialStimuli' ...
    'session3_OneLight'};
%% Get the subject name
subjName = input('Subject name? e.g. TOME_3###:\n','s');
if isempty(subjName)
    error('no subject name!');
end
%% Get the session date
sessDate = GetWithDefault('Session date? (Hit enter to use today''s date):\n', datestamp);
if isempty(sessDate)
    error('no session date!');
end
sprintf(['\nSession Names:\n' ...
    '\n1 - session1_restAndStructure' ...
    '\n2 - session2_spatialStimuli' ...
    '\n3 - session3_OneLight\n'])
sessNum = input('Which session number?\n');
if isempty(sessNum)
    sessNum = 1;
end
%% Set output directory
outDir = fullfile(dbDir,'TOME_data',sessNames{sessNum},subjName,sessDate,'EyeTracking/');
if ~exist(outDir,'dir')
    mkdir(outDir);
end
%%
switch sessNum
    case 1 %restAndStructure
        runNames = {...
            'rfMRI_REST_AP_run01' ...
            'rfMRI_REST_PA_run02' ...
            'rfMRI_REST_AP_run03' ...
            'rfMRI_REST_PA_run04' ...
            'GazeCal'...
            'dMRI_dir98_AP' ...
            'dMRI_dir98_PA' ...
            'dMRI_dir99_AP' ...
            'dMRI_dir99_PA' ...
            'T1' ...
            'T2' ...
            'ScaleCal' ...
            'Preview' ...
            };
        runSecs = {...
            356 ...
            356 ...
            356 ...
            356 ...
            347 ...
            347 ...
            351 ...
            351 ...
            405 ...
            405 ...
            370 ...
            5 ...
            };
        fprintf(['\nRun Names:\n' ...
            '\n1 - rfMRI_REST_AP_run01' ...
            '\n2 - rfMRI_REST_PA_run02' ...
            '\n3 - rfMRI_REST_AP_run03' ...
            '\n4 - rfMRI_REST_PA_run04' ...
            '\n >>>> Restart Matlab at this point <<<< ' ...
            '\n5 - Gaze Calibration' ...
            '\n6 - dMRI_dir98_AP' ...
            '\n7 - dMRI_dir98_PA' ...
            '\n8 - dMRI_dir99_AP' ...
            '\n9 - dMRI_dir99_PA' ...
            '\n10 - T1' ...
            '\n11 - T2' ...
            '\n12 - Scale calibration' ...
            '\n0 - Tracking Preview' ...
            ]);
        runNum = input('\nWhich run number? \n');
        
        switch runNum
            case 12 % scale calibration
                disp ('Press spacebar when ready to calibrate.')
                pause;
                scaleDiams = GetWithDefault('Enter pupil diameters on calibration stick you want to test. Use square brackets for multiple ones.', 5);
                recTime = runSecs{runNum};
                ScaleCal = LiveTrack_ScaleCalibration(scaleDiams, recTime, outDir);
                save(fullfile(outDir, [subjName '_' sessDate 'ScaleCal']), 'ScaleCal')
                
                
            case 5 % gaze calibration
                repeatCal = 'y';
                while repeatCal == 'y'
                    savePath = outDir;
                    saveName = runNames{runNum};
                    %Check if current file already exists
                    Files= { ...
                        '_LTdat.mat' ...
                        '_LTcal.mat' ...
                        'MeanError.fig' ...
                        '.mov' ...
                        '_rawVidStart.mat'...
                        };
                    for ff =1:length(Files)
                        if exist (fullfile(savePath, [saveName Files{ff}]), 'file')
                            fprintf('Files for this runs already exist. Copying previous versions to the folder Aborted_runs...\n')
                            if ~exist (fullfile(savePath, 'Aborted_runs'), 'dir')
                                mkdir (fullfile(savePath, 'Aborted_runs'))
                            end
                            if exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']), 'file') && ...
                                    exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_02']), 'file')
                                movefile (fullfile(savePath, [saveName Files{ff}]), fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_03']));
                            elseif exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']), 'file') && ...
                                    ~exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_02']), 'file')
                                movefile (fullfile(savePath, [saveName Files{ff}]), fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_02']));
                            elseif ~exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']), 'file')
                                movefile (fullfile(savePath, [saveName Files{ff}]), fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']));
                            end
                        end
                        fprintf(' >> Done.\n')
                    end
                    fprintf ('\n Make sure that bore lights are on. Press spacebar when ready to calibrate.\n')
                    pause;
                    
                    viewDist = GetWithDefault ('Enter viewing distance in mm:', 1065);
                    screenSize = 32; % screen size at SC3T
                    Window1ID = 0;
                    Window2ID = 1;
                    % raw video acquisition
                    rawScriptPath = which('RawVideoRec.scpt');
                    [status, echo2] = system(sprintf(['osascript ' rawScriptPath ' %s %s %s'], savePath, saveName, 200));
                    rawVidStart = GetSecs;
                    LiveTrack_GazeCalibration(viewDist, screenSize, Window1ID, Window2ID,savePath,saveName)
                    repeatCal = GetWithDefault ('Repeat the calibration [y/n] ?', 'n');
                    repeatCal = lower(repeatCal);
                    save(fullfile(savePath,[saveName '_rawVidStart.mat']), 'rawVidStart');
                end
            case {1, 2, 3, 4, 6, 7, 8, 9, 10, 11} % data collection
                recTime = runSecs{runNum};
                savePath = outDir;
                saveName = runNames{runNum};
                % check if files with this name already exist
                Files= { ...
                    '_report.mat' ...
                    '_track.mp4' ...
                    '_track.mov'...
                    '_raw.mov' ...
                    };
                for ff =1:length(Files)
                    if exist (fullfile(savePath, [saveName Files{ff}]), 'file')
                        fprintf('Files for this runs already exist. Copying previous versions to the folder Aborted_runs...\n')
                        if ~exist (fullfile(savePath, 'Aborted_runs'), 'dir')
                            mkdir (fullfile(savePath, 'Aborted_runs'))
                        end
                        if exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']), 'file') && ...
                                exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_02']), 'file')
                            movefile (fullfile(savePath, [saveName Files{ff}]), fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_03']));
                        elseif exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']), 'file') && ...
                                ~exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_02']), 'file')
                            movefile (fullfile(savePath, [saveName Files{ff}]), fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_02']));
                        elseif ~exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']), 'file')
                            movefile (fullfile(savePath, [saveName Files{ff}]), fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']));
                        elseif exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']), 'file') && ...
                                exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_02']), 'file') && ...
                                exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_03']), 'file')
                            saveNum = GetWithDefault('Insert progressive save number for this aborted run', '04');
                            movefile (fullfile(savePath, [saveName Files{ff}]), fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_' saveNum]));
                        end
                    end
                    fprintf(' >> Done.\n')
                end
                % acquire data
                TTLtrigger = false;
                GetRawVideo = true;
                [Report] = LiveTrack_GetReportAndRaw (TTLtrigger,recTime,savePath,saveName);
                % give some information about the recording
                [TTLPulses] = CountTTLPulses (Report);
                fprintf ('\n>>>> Recorded %d TTL pulses.\n', TTLPulses);
                [trackedSamples,trackedPct] = CountTrackedSamples (Report);
                fprintf ('\n>>>> Pupil was tracked in %.2f percent of the samples.\n',trackedPct);
                
                
            case 0 % show preview within Matlab
                LiveTrack_Preview;
            otherwise
                error ('not available run number!')
        end
    case 2 %spatial stimuli
        runNames = {...
            'GazeCal01' ...
            'tfMRI_RETINO_PA_run01' ...
            'tfMRI_MOVIE_AP_run01' ...
            'GazeCal02' ...
            'tfMRI_RETINO_PA_run02' ...
            'tfMRI_MOVIE_AP_run02' ...
            'tfMRI_FLASH_AP_run01' ...
            'GazeCal03' ...
            'tfMRI_RETINO_AP_run03' ...
            'tfMRI_MOVIE_PA_run03' ...
            'GazeCal04' ...
            'tfMRI_RETINO_AP_run04' ...
            'tfMRI_MOVIE_PA_run04' ...
            'tfMRI_FLASH_PA_run02' ...
            'T1' ...
            'T2' ...
            'ScaleCal' ...
            'Preview' ...
            };
        runSecs = {...
            NaN ...
            356 ...
            356 ...
            NaN ...
            356 ...
            356 ...
            356 ...
            NaN ...
            356 ...
            356 ...
            NaN ...
            356 ...
            356 ...
            356 ...
            405 ...
            370 ...
            5 ...
            };
        fprintf(['\nRun Names:\n' ...
            '\n1 - GazeCal01' ...
            '\n2 - tfMRI_RETINO_PA_run01' ...
            '\n3 - tfMRI_MOVIE_AP_run01' ...
            '\n4 - GazeCal02' ...
            '\n5 - tfMRI_RETINO_PA_run02' ...
            '\n6 - tfMRI_MOVIE_AP_run02' ...
            '\n7 - tfMRI_FLASH_AP_run01' ...
            '\n >>>> Restart Matlab at this point <<<< ' ...
            '\n8 - GazeCal03' ...
            '\n9 - tfMRI_RETINO_AP_run03' ...
            '\n10 - tfMRI_MOVIE_PA_run03' ...
            '\n11 - GazeCal04' ...
            '\n12 - tfMRI_RETINO_AP_run04' ...
            '\n13 - tfMRI_MOVIE_PA_run04' ...
            '\n14 - tfMRI_FLASH_PA_run02' ...
            '\n >>>> Restart Matlab at this point <<<< ' ...
            '\n15 - T1 (only if need to recollect)' ...
            '\n16 - T2 (only if need to recollect)' ...
            '\n17 - Scale calibration' ...
            '\n0 - Tracking Preview' ...
            ]);
        runNum = input('\nWhich run number? \n');
        
        switch runNum
            case {2, 3, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16} % data collection
                recTime = runSecs{runNum};
                savePath = outDir;
                saveName = runNames{runNum};
                % check if files already exist
                Files= { ...
                    '_report.mat' ...
                    '_track.mp4' ...
                    '_track.mov' ...
                    '_raw.mov' ...
                    };
                for ff =1:length(Files)
                    if exist (fullfile(savePath, [saveName Files{ff}]), 'file')
                        fprintf('Files for this runs already exist. Copying previous versions to the folder Aborted_runs...\n')
                        if ~exist (fullfile(savePath, 'Aborted_runs'), 'dir')
                            mkdir (fullfile(savePath, 'Aborted_runs'))
                        end
                        if exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']), 'file') && ...
                                exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_02']), 'file')
                            movefile (fullfile(savePath, [saveName Files{ff}]), fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_03']));
                        elseif exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']), 'file') && ...
                                ~exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_02']), 'file')
                            movefile (fullfile(savePath, [saveName Files{ff}]), fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_02']));
                        elseif ~exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']), 'file')
                            movefile (fullfile(savePath, [saveName Files{ff}]), fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']));
                        elseif exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']), 'file') && ...
                                exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_02']), 'file') && ...
                                exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_03']), 'file')
                            saveNum = GetWithDefault('Insert progressive save number for this aborted run', '04');
                            movefile (fullfile(savePath, [saveName Files{ff}]), fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_' saveNum]));
                        end
                    end
                    fprintf(' >> Done. \n')
                end
                % acquire data 
                TTLtrigger = false;
                GetRawVideo = true;
                [Report] = LiveTrack_GetReportAndRaw (TTLtrigger,recTime,savePath,saveName);
                % give some information about the recording
                [TTLPulses] = CountTTLPulses (Report);
                fprintf ('\n>>>> Recorded %d TTL pulses.\n', TTLPulses);
                [trackedSamples,trackedPct] = CountTrackedSamples (Report);
                fprintf ('\n>>>> Pupil was tracked in %.2f pct of the samples\n',trackedPct);
                
                
            case {1, 4, 8, 11} % gaze calibration
                repeatCal = 'y';
                while repeatCal == 'y'
                    savePath = outDir;
                    saveName = runNames{runNum};
                    %Check if current file already exists
                    Files= { ...
                        '_LTdat.mat' ...
                        '_LTcal.mat' ...
                        'MeanError.fig' ...
                        '.mov' ...
                        '_rawVidStart.mat' ...
                        };
                    for ff =1:length(Files)
                        if exist (fullfile(savePath, [saveName Files{ff}]), 'file')
                            fprintf('Files for this runs already exist. Copying previous versions to the folder Aborted_runs...\n')
                            if ~exist (fullfile(savePath, 'Aborted_runs'), 'dir')
                                mkdir (fullfile(savePath, 'Aborted_runs'))
                            end
                            if exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']), 'file') && ...
                                    exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_02']), 'file')
                                movefile (fullfile(savePath, [saveName Files{ff}]), fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_03']));
                            elseif exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']), 'file') && ...
                                    ~exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_02']), 'file')
                                movefile (fullfile(savePath, [saveName Files{ff}]), fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_02']));
                            elseif ~exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']), 'file')
                                movefile (fullfile(savePath, [saveName Files{ff}]), fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']));
                            end
                        end
                        fprintf(' >> Done.\n')
                    end
                    fprintf ('\n Make sure that bore lights are on. Press spacebar when ready to calibrate.\n')
                    pause;
                    viewDist = GetWithDefault ('Enter viewing distance in mm:', 1065);
                    screenSize = 32; % screen size at SC3T
                    Window1ID = 0;
                    Window2ID = 1;
                    % raw video acquisition
                    rawScriptPath = which('RawVideoRec.scpt');
                    [status, echo2] = system(sprintf(['osascript ' rawScriptPath ' %s %s %s'], savePath, saveName, 200));
                    rawVidStart = GetSecs;
                    LiveTrack_GazeCalibration(viewDist, screenSize, Window1ID, Window2ID,savePath,saveName)
                    repeatCal = GetWithDefault ('Repeat the calibration [y/n] ?', 'n');
                    repeatCal = lower(repeatCal);
                    save(fullfile(savePath,[saveName '_rawVidStart.mat']), 'rawVidStart');
                end
                
            case 17 % scale calibration
                disp ('Press spacebar when ready to calibrate.')
                pause;
                scaleDiams = GetWithDefault('Enter pupil diameters on calibration stick you want to test. Use square brackets for multiple ones.', 5);
                recTime = runSecs{runNum};
                ScaleCal = LiveTrack_ScaleCalibration(scaleDiams, recTime, outDir);
                save(fullfile(outDir, [subjName '_' sessDate 'ScaleCal']), 'ScaleCal')
                
            case 0 % preview tracking within Matlab
                LiveTrack_Preview;
            otherwise
                error ('not available run number!')
        end
        
    case 3 % OneLight
        runNames = {...
            'tfMRI_L_minus_M_A_AP' ...
            'tfMRI_Lightflux_A_PA' ...
            'tfMRI_S_A_AP' ...
            'tfMRI_S_B_PA' ...
            'tfMRI_Lightflux_B_AP' ...
            'tfMRI_L_minus_M_B_PA' ...
            'Scale_Cal' ...
            'Preview' ...
            };
        runSecs = {...
            'tfMRI_L_minus_M_A_AP' ...
            'tfMRI_Lightflux_A_PA' ...
            'tfMRI_S_A_AP' ...
            'tfMRI_S_B_PA' ...
            'tfMRI_Lightflux_B_AP' ...
            'tfMRI_L_minus_M_B_PA' ...
            5 ...
            };
        fprintf(['\nRun Names:\n' ...
            '\n1 - tfMRI_L_minus_M_A_AP' ...
            '\n2 - tfMRI_Lightflux_A_PA' ...
            '\n3 - tfMRI_S_A_AP' ...
            '\n4 - tfMRI_S_B_PA' ...
            '\n5 - tfMRI_Lightflux_B_AP' ...
            '\n6 - tfMRI_L_minus_M_B_PA' ...
            '\n7 - Scale Calibration' ...
            '\n0 - Tracking Preview' ...
            ]);
        runNum = input('\nWhich run number? \n');
        switch runNum
            case {1, 2, 3, 4, 5, 6} % data collection
                recTime = runSecs{runNum};
                savePath = outDir;
                saveName = runNames{runNum};
                % check if files already exist
                Files= { ...
                    '_report.mat' ...
                    '_track.mp4' ...
                    '_track.mov' ...
                    '_raw.mov' ...
                    };
                for ff =1:length(Files)
                    if exist (fullfile(savePath, [saveName Files{ff}]), 'file')
                        fprintf('Files for this runs already exist. Copying previous versions to the folder Aborted_runs...\n')
                        if ~exist (fullfile(savePath, 'Aborted_runs'), 'dir')
                            mkdir (fullfile(savePath, 'Aborted_runs'))
                        end
                        if exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']), 'file') && ...
                                exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_02']), 'file')
                            movefile (fullfile(savePath, [saveName Files{ff}]), fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_03']));
                        elseif exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']), 'file') && ...
                                ~exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_02']), 'file')
                            movefile (fullfile(savePath, [saveName Files{ff}]), fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_02']));
                        elseif ~exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']), 'file')
                            movefile (fullfile(savePath, [saveName Files{ff}]), fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']));
                        elseif exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_01']), 'file') && ...
                                exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_02']), 'file') && ...
                                exist (fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_03']), 'file')
                            saveNum = GetWithDefault('Insert progressive save number for this aborted run', '04');
                            movefile (fullfile(savePath, [saveName Files{ff}]), fullfile(savePath, 'Aborted_runs', [saveName Files{ff} '_ABORTED_' saveNum]));
                        end
                    end
                    fprintf (' >> Done.\n')
                end
                % acquire data
                TTLtrigger = false;
                GetRawVideo = true;
                [Report] = LiveTrack_GetReportAndRaw (TTLtrigger,recTime,savePath,saveName);
                % give some information about the recording
                [TTLPulses] = CountTTLPulses (Report);
                fprintf ('\n>>>> Recorded %d TTL pulses.\n', TTLPulses);
                [trackedSamples,trackedPct] = CountTrackedSamples (Report);
                fprintf ('\n>>>> Pupil was tracked in %.2f percent of the samples.\n',trackedPct);
                
                
            case 7 % Scale calibration
                disp ('Press spacebar when ready to calibrate.')
                pause;
                scaleDiams = GetWithDefault('Enter pupil diameters on calibration stick you want to test. Use square brackets for multiple ones.', 5);
                recTime = runSecs{runNum};
                ScaleCal = LiveTrack_ScaleCalibration(scaleDiams, recTime, outDir);
                save(fullfile(outDir, [subjName '_' sessDate 'ScaleCal']), 'ScaleCal')
                
            case 0 % preview tracking within Matlab
                LiveTrack_Preview;
            otherwise
                error ('not available run number!')
        end
end







